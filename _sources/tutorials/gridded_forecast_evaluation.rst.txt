
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/gridded_forecast_evaluation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_gridded_forecast_evaluation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_gridded_forecast_evaluation.py:


.. _grid-forecast-evaluation:

Grid-based Forecast Evaluation
==============================

This example demonstrates how to evaluate a grid-based and time-independent forecast. Grid-based
forecasts assume the variability of the forecasts is Poissonian. Therefore, Poisson-based evaluations
should be used to evaluate grid-based forecasts.

Overview:
    1. Define forecast properties (time horizon, spatial region, etc).
    2. Obtain evaluation catalog
    3. Apply Poissonian evaluations for grid-based forecasts
    4. Store evaluation results using JSON format
    5. Visualize evaluation results

.. GENERATED FROM PYTHON SOURCE LINES 21-26

Load required libraries
-----------------------

Most of the core functionality can be imported from the top-level :mod:`csep` package. Utilities are available from the
:mod:`csep.utils` subpackage.

.. GENERATED FROM PYTHON SOURCE LINES 26-31

.. code-block:: default


    import csep
    from csep.core import poisson_evaluations as poisson
    from csep.utils import datasets, time_utils, plots








.. GENERATED FROM PYTHON SOURCE LINES 32-38

Define forecast properties
--------------------------

We choose a :ref:`time-independent-forecast` to show how to evaluate a grid-based earthquake forecast using PyCSEP. Note,
the start and end date should be chosen based on the creation of the forecast. This is important for time-independent forecasts
because they can be rescale to any arbitrary time period.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    start_date = time_utils.strptime_to_utc_datetime('2006-11-12 00:00:00.0')
    end_date = time_utils.strptime_to_utc_datetime('2011-11-12 00:00:00.0')








.. GENERATED FROM PYTHON SOURCE LINES 43-48

Load forecast
-------------

For this example, we provide the example forecast data set along with the main repository. The filepath is relative
to the root directory of the package. You can specify any file location for your forecasts.

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: default


    forecast = csep.load_gridded_forecast(datasets.helmstetter_aftershock_fname,
                                          start_date=start_date,
                                          end_date=end_date,
                                          name='helmstetter_aftershock')








.. GENERATED FROM PYTHON SOURCE LINES 55-61

Load evaluation catalog
-----------------------

We will download the evaluation catalog from ComCat (this step requires an internet connection). We can use the ComCat API
to filter the catalog in both time and magnitude. See the catalog filtering example, for more information on how to
filter the catalog in space and time manually.

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default


    catalog = csep.query_comcat(forecast.start_time, forecast.end_time,
                                min_magnitude=forecast.min_magnitude)
    print(catalog)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fetched ComCat catalog in 4.848646402359009 seconds.

    Downloaded catalog from ComCat with following parameters
    Start Date: 2007-02-26 12:19:54.530000+00:00
    End Date: 2011-02-18 17:47:35.770000+00:00
    Min Latitude: 31.9788333 and Max Latitude: 41.1444
    Min Longitude: -125.0161667 and Max Longitude: -114.8398
    Min Magnitude: 4.96
    Found 34 events in the ComCat catalog.

            Name: None
        
            Start Date: 2007-02-26 12:19:54.530000+00:00
            End Date: 2011-02-18 17:47:35.770000+00:00
        
            Latitude: (31.9788333, 41.1444)
            Longitude: (-125.0161667, -114.8398)
        
            Min Mw: 4.96
            Max Mw: 7.2
        
            Event Count: 34
        




.. GENERATED FROM PYTHON SOURCE LINES 67-71

Filter evaluation catalog in space
----------------------------------

We need to remove events in the evaluation catalog outside the valid region specified by the forecast.

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: default


    catalog = catalog.filter_spatial(forecast.region)
    print(catalog)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


            Name: None
        
            Start Date: 2007-02-26 12:19:54.530000+00:00
            End Date: 2011-02-18 17:47:35.770000+00:00
        
            Latitude: (31.9788333, 41.1155)
            Longitude: (-125.0161667, -115.0481667)
        
            Min Mw: 4.96
            Max Mw: 7.2
        
            Event Count: 32
        




.. GENERATED FROM PYTHON SOURCE LINES 76-82

Compute Poisson spatial test
----------------------------

Simply call the :func:`csep.core.poisson_evaluations.spatial_test` function to evaluate the forecast using the specified
evaluation catalog. The spatial test requires simulating from the Poisson forecast to provide uncertainty. The verbose
option prints the status of the simulations to the standard output.

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: default


    spatial_test_result = poisson.spatial_test(forecast, catalog)








.. GENERATED FROM PYTHON SOURCE LINES 86-91

Store evaluation results
------------------------

PyCSEP provides easy ways of storing objects to a JSON format using :func:`csep.write_json`. The evaluations can be read
back into the program for plotting using :func:`csep.load_evaluation_result`.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: default


    csep.write_json(spatial_test_result, 'example_spatial_test.json')








.. GENERATED FROM PYTHON SOURCE LINES 95-100

Plot spatial test results
-------------------------

We provide the function :func:`csep.utils.plotting.plot_poisson_consistency_test` to visualize the evaluation results from
consistency tests.

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: default


    ax = plots.plot_poisson_consistency_test(spatial_test_result,
                                            plot_args={'xlabel': 'Spatial likelihood'})



.. image:: /tutorials/images/sphx_glr_gridded_forecast_evaluation_001.png
    :alt: Poisson S-Test
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.265 seconds)


.. _sphx_glr_download_tutorials_gridded_forecast_evaluation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: gridded_forecast_evaluation.py <gridded_forecast_evaluation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: gridded_forecast_evaluation.ipynb <gridded_forecast_evaluation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
