
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/working_with_catalog_forecasts.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_working_with_catalog_forecasts.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_working_with_catalog_forecasts.py:


Working with catalog-based forecasts
====================================

This example shows some basic interactions with data-based forecasts. We will load in a forecast stored in the CSEP
data format, and compute the expected rates on a 0.1° x 0.1° grid covering the state of California. We will plot the
expected rates in the spatial cells.

Overview:
    1. Define forecast properties (time horizon, spatial region, etc).
    2. Compute the expected rates in space and magnitude bins
    3. Plot expected rates in the spatial cells

.. GENERATED FROM PYTHON SOURCE LINES 16-21

Load required libraries
-----------------------

Most of the core functionality can be imported from the top-level :mod:`csep` package. Utilities are available from the
:mod:`csep.utils` subpackage.

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: default


    import numpy

    import csep
    from csep.core import regions
    from csep.utils import datasets








.. GENERATED FROM PYTHON SOURCE LINES 29-34

Load data forecast
---------------------

PyCSEP contains some basic forecasts that can be used to test of the functionality of the package. This forecast has already 
been filtered to the California RELM region.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default


    forecast = csep.load_catalog_forecast(datasets.ucerf3_ascii_format_landers_fname)








.. GENERATED FROM PYTHON SOURCE LINES 38-45

Define spatial and magnitude regions
------------------------------------

Before we can compute the bin-wise rates we need to define a spatial region and a set of magnitude bin edges. The magnitude
bin edges # are the lower bound (inclusive) except for the last bin, which is treated as extending to infinity. We can
bind these # to the forecast object. This can also be done by passing them as keyword arguments
into :func:`csep.load_catalog_forecast`.

.. GENERATED FROM PYTHON SOURCE LINES 45-58

.. code-block:: default


    # Magnitude bins properties
    min_mw = 4.95
    max_mw = 8.95
    dmw = 0.1

    # Create space and magnitude regions
    magnitudes = regions.magnitude_bins(min_mw, max_mw, dmw)
    region = regions.california_relm_region()

    # Bind region information to the forecast (this will be used for binning of the catalogs)
    forecast.region = regions.create_space_magnitude_region(region, magnitudes)








.. GENERATED FROM PYTHON SOURCE LINES 59-64

Compute spatial event counts
----------------------------

The :class:`csep.core.forecasts.CatalogForecast` provides a method to compute the expected number of events in spatial cells. This 
requires a region with magnitude information. 

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default


    _ = forecast.get_expected_rates(verbose=True)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processed 1 catalogs in 0.0021300315856933594 seconds
    Processed 2 catalogs in 0.0036373138427734375 seconds
    Processed 3 catalogs in 0.004846096038818359 seconds
    Processed 4 catalogs in 0.0061304569244384766 seconds
    Processed 5 catalogs in 0.007158756256103516 seconds
    Processed 6 catalogs in 0.008330821990966797 seconds
    Processed 7 catalogs in 0.009375810623168945 seconds
    Processed 8 catalogs in 0.01056981086730957 seconds
    Processed 9 catalogs in 0.012650728225708008 seconds
    Processed 10 catalogs in 0.013895750045776367 seconds
    Processed 20 catalogs in 0.025584936141967773 seconds
    Processed 30 catalogs in 0.03815937042236328 seconds
    Processed 40 catalogs in 0.05068159103393555 seconds
    Processed 50 catalogs in 0.06368875503540039 seconds
    Processed 60 catalogs in 0.07610368728637695 seconds
    Processed 70 catalogs in 0.0883028507232666 seconds
    Processed 80 catalogs in 0.10642838478088379 seconds
    Processed 90 catalogs in 0.12186074256896973 seconds
    Processed 100 catalogs in 0.13582468032836914 seconds
    Processed 200 catalogs in 0.2688865661621094 seconds
    Processed 300 catalogs in 0.3960878849029541 seconds
    Processed 400 catalogs in 0.5209987163543701 seconds
    Processed 500 catalogs in 0.6935806274414062 seconds
    Processed 600 catalogs in 0.815711259841919 seconds
    Processed 700 catalogs in 0.9416921138763428 seconds
    Processed 800 catalogs in 1.1202731132507324 seconds
    Processed 900 catalogs in 1.244473934173584 seconds
    Processed 1000 catalogs in 1.370140552520752 seconds
    Processed 2000 catalogs in 2.8760502338409424 seconds
    Processed 3000 catalogs in 4.316277265548706 seconds
    Processed 4000 catalogs in 5.804922342300415 seconds
    Processed 5000 catalogs in 7.25318717956543 seconds
    Processed 6000 catalogs in 8.668710231781006 seconds
    Processed 7000 catalogs in 10.088348388671875 seconds
    Processed 8000 catalogs in 11.422728776931763 seconds
    Processed 9000 catalogs in 12.94207215309143 seconds
    Processed 10000 catalogs in 14.296847581863403 seconds




.. GENERATED FROM PYTHON SOURCE LINES 69-73

Plot expected event counts
--------------------------

We can plot the expected event counts the same way that we plot a :class:`csep.core.forecasts.GriddedForecast`

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default


    ax = forecast.expected_rates.plot(plot_args={'clim': [-3.5, 0]})




.. image:: /tutorials/images/sphx_glr_working_with_catalog_forecasts_001.png
    :alt: ucerf3-landers
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 77-78

The images holes in the image are due to under-sampling from the forecast.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

Quick sanity check
------------------

The forecasts were filtered to the spatial region so all events should be binned. We loop through each data in the forecast and
count the number of events and compare that with the expected rates. The expected rate is an average in each space-magnitude bin, so
we have to multiply this value by the number of catalogs in the forecast.

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: default


    total_events = 0
    for catalog in forecast:
        total_events += catalog.event_count
    numpy.testing.assert_allclose(total_events, forecast.expected_rates.sum() * forecast.n_cat)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.064 seconds)


.. _sphx_glr_download_tutorials_working_with_catalog_forecasts.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: working_with_catalog_forecasts.py <working_with_catalog_forecasts.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: working_with_catalog_forecasts.ipynb <working_with_catalog_forecasts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
